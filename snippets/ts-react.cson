'Typescript-React: basic typescript react template':
  'prefix': '_tsr'
  'body': '''
    import * as React from 'react';

    interface I${1:ComponentName}Props { }

    interface I${1:ComponentName}State { }

    export default class ${1:ComponentName} extends React.Component<I${1:ComponentName}Props, I${1:ComponentName}State> {
      public render() {
        return (
          ${2:<span>Body</span>}
        );
      }
    }
  '''

'Typescript-React: typescript react redux template':
  'prefix': '_tsrr'
  'body': '''
    import * as React from 'react';
    import { connect } from 'react-redux';
    import { AnyAction, Dispatch } from 'redux';

    // Component

    interface I${1:ComponentName}StateProps { }

    interface I${1:ComponentName}DispatchProps { }

    interface I${1:ComponentName}Props extends I${1:ComponentName}StateProps, I${1:ComponentName}DispatchProps { }

    interface I${1:ComponentName}State { }

    class ${1:ComponentName} extends React.Component<I${1:ComponentName}Props, I${1:ComponentName}State> {
      public render() {
        return (
          ${3:<span>Body</span>}
        );
      }
    }

    // Container

    interface I${1:ComponentName}OwnProps { }

    const mapStateToProps = (state: ${2:IGlobalState}, ownProps: I${1:ComponentName}OwnProps): I${1:ComponentName}StateProps => {
      return {
        // ...mapStateToProps
      };
    };

    const mapDispatchToProps = (dispatch: Dispatch<AnyAction>, ownProps: I${1:ComponentName}OwnProps): I${1:ComponentName}DispatchProps => {
      return {
        // ...mapDispatchToProps
      };
    };

    export default connect(
      mapStateToProps,
      mapDispatchToProps,
    )(${1:ComponentName});
  '''

'Typescript-React: typescript react redux template with i18n support':
  'prefix': '_tsrri'
  'body': '''
    import * as React from 'react';
    import { InjectedI18nProps, InjectedTranslateProps, translate } from 'react-i18next';
    import { connect } from 'react-redux';
    import { AnyAction, Dispatch } from 'redux';

    import i18ns from './i18n';

    // Component

    interface I${1:ComponentName}StateProps { }

    interface I${1:ComponentName}DispatchProps { }

    interface I${1:ComponentName}Props extends I${1:ComponentName}StateProps, I${1:ComponentName}DispatchProps, InjectedI18nProps, InjectedTranslateProps { }

    interface I${1:ComponentName}State { }

    class ${1:ComponentName} extends React.Component<I${1:ComponentName}Props, I${1:ComponentName}State> {
      constructor(props: I${1:ComponentName}Props) {
        super(props);
        this.loadI18ns();
      }

      public loadI18ns() {
        const { i18n } = this.props;
        for (const key in i18ns) {
          if (i18ns.hasOwnProperty(key)) {
            i18n.addResourceBundle(key, '${1:ComponentName}', i18ns[key]);
          }
        }
      }

      public render() {
        const { t } = this.props;
        return (
          ${3:<span>{t('text')\\}</span>}
        );
      }
    }

    // Container

    interface I${1:ComponentName}OwnProps { }

    const mapStateToProps = (state: ${2:IGlobalState}, ownProps: I${1:ComponentName}OwnProps): I${1:ComponentName}StateProps => {
      return {
        // ...mapStateToProps
      };
    };

    const mapDispatchToProps = (dispatch: Dispatch<AnyAction>, ownProps: I${1:ComponentName}OwnProps): I${1:ComponentName}DispatchProps => {
      return {
        // ...mapDispatchToProps
      };
    };

    export default connect(
      mapStateToProps,
      mapDispatchToProps,
    )(translate('${1:ComponentName}')(${1:ComponentName}));
  '''

'Typescript-React: constructor':
  'prefix': '_con'
  'body': '''
    constructor(props: I${1:ComponentName}Props) {
      super(props);
      ${2}
    }
    ${3}
  '''

'Typescript-React: componentWillMount':
  'prefix': '_cwm'
  'body': '''
    public componentWillMount() {
      ${1}
    }
    ${2}
  '''

'Typescript-React: componentDidMount':
  'prefix': '_cdm'
  'body': '''
    public componentDidMount() {
      ${1}
    }
    ${2}
  '''

'Typescript-React: componentWillReceiveProps':
  'prefix': '_cwr'
  'body': '''
    public componentWillReceiveProps(nextProps: I${1:ComponentName}Props) {
      ${2}
    }
    ${3}
  '''

'Typescript-React: shouldComponentUpdate':
  'prefix': '_scup'
  'body': '''
    public shouldComponentUpdate(nextProps: I${1:ComponentName}Props, nextState: I${1:ComponentName}State): boolean {
      ${2}
      return true;
    }
    ${3}
  '''

'Typescript-React: componentWillUpdate':
  'prefix': '_cwup'
  'body': '''
    public componentWillUpdate(nextProps: I${1:ComponentName}Props, nextState: I${1:ComponentName}State) {
      ${2}
    }
    ${3}
  '''

'Typescript-React: componentDidUpdate':
  'prefix': '_cdup'
  'body': '''
    public componentDidUpdate(prevProps: I${1:ComponentName}Props, prevState: I${1:ComponentName}State) {
      ${2}
    }
    ${3}
  '''

'Typescript-React: componentWillUnmount':
  'prefix': '_cwun'
  'body': '''
    public componentWillUnmount() {
      ${1}
    }
    ${2}
  '''
